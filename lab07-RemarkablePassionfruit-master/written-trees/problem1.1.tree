       6
     4   8
    2 5
   1

  : \vspace{2.5mm} \noindent We see that the left child of root 6 has a height of 2 while the right child has a height of 0, and since the height of the left subtree is greater than the height of the right subtree by 2 and $2 > 1$, we need to perform an right rotation to balance the tree. 
  :
  : \vspace{2.5mm} \noindent The binary search property dictates that $A < x < B < y < C$ where $x$ is the node we want to rotate around, $y$ is the node rotating around it. For this tree, $(A = 2) < (x = 4) < (B = 5) < (y = 6) < (C = 8)$. So, when we call \texttt{rightRotate(6)}, we get the resulting tree:

          4
        2   6
      1    5  8

  : \noindent Since the heights of root 4's children differ by at most one, we know that this is an AVL tree.