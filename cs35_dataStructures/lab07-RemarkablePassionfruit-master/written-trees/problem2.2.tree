        9
    8       6
  7   2   5   3
 4 6 1 2 1 3 2

: \vspace{2.5mm} \noindent First, we perform \texttt{remove(9)} and swap the rightmost node at depth 0, which is the most recently added node, to get the following tree: 

                2
         8             6
      7     2       5     3
    4  6  1   2   1   3

: \vspace{2.5mm} \noindent By definition, a heap must be complete tree where each node is greater than or equal to all of its subsequent children. Because $2 < 8$ and $2 < 6$, the above tree violates the second property. To rectify this, we call \texttt{bubbleDown(2)} and swap 2 with its max child 8 to get the resulting tree:

                8
          2           6
      7     2      5     3
    4  6  1   2  1  3  

: \vspace{2.5mm} \noindent Here, 2 is still less than both of its children, so we recursively call \texttt{bubbleDown(2)} and swap 2 with its max child 7 to get the resulting tree:

                8
          7           6
      2     2     5      3
   4    6  1  2  1  3


: \vspace{2.5mm} \noindent Since 2 is still less than both of its children, we call \texttt{bubbleDown(2)} once again and swap 2 with its max child 6 to get the resulting tree:

              8
         7           6
    6       2      5      3
 4    2   1   2  1   3 
